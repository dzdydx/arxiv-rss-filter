name: Run Arxiv Filter

on:
  schedule:
    # 北京时间 10:00 对应 UTC 时间 02:00
    - cron: '0 2 * * 1-5'  # 周一到周五 UTC 02:00 (北京时间 10:00)
  workflow_dispatch:  # 添加手动触发选项

jobs:
  check-updates:
    runs-on: ubuntu-latest
    outputs:
      has_updates: ${{ steps.check.outputs.has_updates }}
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create .env file
      run: |
        echo "API_KEY=${{ secrets.API_KEY }}" > .env
        echo "MODEL_NAME=${{ secrets.MODEL_NAME }}" >> .env
        echo "BASE_URL=${{ secrets.BASE_URL }}" >> .env
    
    - name: Check for updates
      id: check
      run: |
        python -c "
        import feedparser
        from datetime import datetime, timezone
        import pytz
        
        def check_feed_update(feed_url):
            feed = feedparser.parse(feed_url)
            if not feed.entries:
                return False
                
            # 获取最新的更新时间
            latest_update = datetime(*feed.entries[0].published_parsed[:6], tzinfo=timezone.utc)
            # 转换为本地时间
            local_tz = pytz.timezone('Asia/Shanghai')
            latest_update = latest_update.astimezone(local_tz)
            
            # 如果最新更新时间在20小时内，则认为有更新
            now = datetime.now(local_tz)
            hours_diff = (now - latest_update).total_seconds() / 3600
            return hours_diff < 20
        
        # 检查所有RSS源
        from config import area_interest_list
        has_updates = any(check_feed_update(item['rss_url']) for item in area_interest_list)
        print(f'has_updates={str(has_updates).lower()}')
        "
    
  run-filter:
    needs: check-updates
    if: needs.check-updates.outputs.has_updates == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create .env file
      run: |
        echo "API_KEY=${{ secrets.API_KEY }}" > .env
        echo "MODEL_NAME=${{ secrets.MODEL_NAME }}" >> .env
        echo "BASE_URL=${{ secrets.BASE_URL }}" >> .env
    
    - name: Run filter
      run: python main.py
    
    - name: Generate RSS feed
      run: python generate_rss.py
    
    - name: Deploy RSS feed
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: .
        publish_branch: gh-pages
        keep_files: true
        commit_message: ${{ github.event.head_commit.message }} 